// Learn place field on one-dimensional track
// Single PC with plastic synapses.
// New 5-cpt PC model based on Tort, but using ion channels and distributions
// from my Migliore-adapted PC model from Neural Computation (2014) paper.
// PC driven by multiple spiking inputs from CA3 and/or EC to dendrites.
// Spiking mimics 1d place cell activity (PT1dstim: based on Chance, J Neurosci 2012)
// Both CA3 and EC inputs are "place cells" in this version.
// Rhythmic GClamp inhibition can be added to the dendrites.
// Graupner-Brunel plasticity available for excitatory synapses.
// (Uses combined AMPA/NMDA/plasticity model: ANsynGB).
// Programmed by BPG 29-4-15

load_file("nrngui.hoc") // make graphical interface tools available to this program
load_file("CA1PC5.hoc")
cvode_active(1)		// needed to correct synaptic plasticity calculations at least

// RANDOM NUMBER GENERATORS
objref r
r = new Random(0)	// start each with a different seed

Tstop=200000	// ms

// CREATING CELL
objectvar cell
cell = new PCell5()

// PAIRING (not usually used)
IPI = 200	// inter-pair interval (ms)
pdel = 100	// start delay (ms)
prepostDT = 20	// time of post after pre (ms)
nrepmax = 100	// max number of stimulus repetitions
nrep = nrepmax	// number of repetitions

// PRESYNAPTIC SPIKING INPUTS

// 1d arena
RUNstart=500	// (ms) : start of run along track
RUNdelay=1000	// (ms) : delay between repeat runs
RUNspeed=40 	// (cm/s)	: running speed
RUNmaxdist=200 	// (cm)	: length of track
RUNtime = (RUNmaxdist/RUNspeed)*1000	// (ms)

// CA3 1d place field specifications
//PLmaxfr=15 	// (Hz)	: max frequency of spikes per synapse
PLmaxfr=8 	// (Hz)	: max frequency set low to account for prob. of release at CA3 inputs
PLthfreq=5 	// (Hz)	: modulation frequency (theta)
PLthphase=0	// (deg) : theta phase
PLthamp=0	// <0,1> : amplitude of theta modulation (0<thamp<=1)
PLx0=100 	// (cm)	: place field center
PLsig=10 	// (cm)	: place field width

// EC spiking	(place cells too)
ECPLmaxfr=15 	// (Hz)	: max frequency of spikes per synapse
ECPLthfreq=5 	// (Hz)	: modulation frequency (theta)
ECPLthphase=0	// (deg) : theta phase
ECPLthamp=0	// <0,1> : amplitude of theta modulation (0<thamp<=1)
ECPLx0=100 	// (cm)	: place field center
ECPLsig=10 	// (cm)	: place field width

// CA3 and EC spiking drives
// (following max CA3 weight gives an EPSC of 110pA in soma with 10 synch input spikes in Adend[1])
// (somatic current recorded with SEClamp point process)
CA3noise = 0.5
CA3wmax = 0.005	// AMPA (strong) - maximum learnt weight (spiking with asynch inputs)
//CA3wmax = 0.0005	// AMPA (strong) - maximum learnt weight (10 synchronous inputs)
//CA3wmax = 0.0002	// AMPA (strong) - maximum learnt weight (use in Adend[0])
//CA3wmin = 0.2	// AMPA - starting weight (fraction of wmax)
CA3wmin = 1	// AMPA - starting weight (fraction of wmax)
CA3wN = 0.001	// NMDA
CA3p0 = 0	// initial plastic state (0=depressed, 1=potentiated)
ECnoise = 0.5
ECwmax = 0.0005	// AMPA (strong) - maximum learnt weight
ECwmin = 1	// AMPA - starting weight (fraction of wmax)
ECwN = 0.004	// NMDA

// RHYTHMIC INHIBITION
thetafr = PLthfreq	// Hz
thisi = 1000 / thetafr	// ISI (ms)
Ithdr=0.01	// uS
Bthdr=0.005	// uS
Othdr=0.005	// uS

// RECORDING AND STIMULATION
//nCA3 = 10	// approx. number of inputs generated in W&W experiments
//nEC = 10
nCA3 = 100	// approx. number of inputs generated in W&W experiments
nEC = 100
objectvar CA3spikes[nCA3], CA3syn[nCA3], CA3nc[nCA3]
objectvar ECspikes[nEC], ECnc[nEC], ECsyn[nEC]
objref tvec

// Excitatory stimulation
// spiking CA3 input
for i = 0,nCA3-1 {
	CA3spikes[i] = new PT1dStim()
	CA3spikes[i].noise = CA3noise
	CA3spikes[i].start = RUNstart
	CA3spikes[i].speed = RUNspeed
	CA3spikes[i].maxdist = RUNmaxdist
	CA3spikes[i].maxfr = PLmaxfr
	CA3spikes[i].thfreq = PLthfreq
	CA3spikes[i].thphase = PLthphase
	CA3spikes[i].plx0 = r.normal(PLx0, PLx0/10)
	CA3spikes[i].plsig = r.normal(PLsig, PLsig/2)
	cell.Adend[1] CA3syn[i] = new ANsynGB(0.5)
	CA3nc[i] = new NetCon(CA3spikes[i], CA3syn[i])
	CA3nc[i].weight= CA3wmax
	CA3syn[i].wmin = CA3wmin
	CA3syn[i].gNmax = CA3wN
	CA3syn[i].p0 = CA3p0
}

// spiking EC input
for i = 0,nEC-1 {
	ECspikes[i] = new PT1dStim()
	ECspikes[i].noise = ECnoise
	ECspikes[i].start = RUNstart
	ECspikes[i].speed = RUNspeed
	ECspikes[i].maxdist = RUNmaxdist
	ECspikes[i].maxfr = ECPLmaxfr
	ECspikes[i].thfreq = ECPLthfreq
	ECspikes[i].thphase = ECPLthphase
	ECspikes[i].plx0 = r.normal(PLx0, PLx0/10)
	ECspikes[i].plsig = r.normal(PLsig, PLsig/2)
	cell.Adend[2] ECsyn[i] = new ANsynGB(0.5)
	ECnc[i] = new NetCon(ECspikes[i], ECsyn[i])
	ECnc[i].weight= ECwmax
	ECsyn[i].wmin = ECwmin
	ECsyn[i].gNmax = ECwN
}
							
// Inhibitory stimulation
objectvar ostim, istim, bstim
objectvar btheta, itheta, otheta

// BC perisomatic inhib
istim = new GClamp()
cell.soma istim.loc(0.5)
istim.del = 0
istim.dur = Tstop
istim.erev = -80
itheta = new Vector(Tstop)
itheta.sin(thetafr, 0)
itheta.add(1)
itheta.mul(Ithdr)
itheta.play(&istim.amp, 1)

// BSC dendritic inhib
bstim = new GClamp()
cell.Adend[1] bstim.loc(0.5)
bstim.del = 0
bstim.dur = Tstop
bstim.erev = -80
btheta = new Vector(Tstop)
btheta.sin(thetafr, PI)
btheta.add(1)
btheta.mul(Bthdr)
btheta.play(&bstim.amp, 1)

// OLM distal dendritic inhib
ostim = new GClamp()
cell.Adend[2] ostim.loc(0.5)
ostim.del = 0
ostim.dur = Tstop
ostim.erev = -80
otheta = new Vector(Tstop)
otheta.sin(thetafr, PI)
otheta.add(1)
otheta.mul(Othdr)
otheta.play(&ostim.amp, 1)


// PARAMETER CONTROL

// Set CA3 spikes
proc setCA3spikes() {
	for i=0, nCA3-1 {
		CA3spikes[i].maxfr = PLmaxfr
		CA3spikes[i].noise = CA3noise
	}
}

// Set pairing
proc setECspikes() {
	for i=0, nEC-1 {
		ECspikes[i].maxfr = ECPLmaxfr
		ECspikes[i].noise = ECnoise
	}
}

// Excitatory weights
proc setEweights() {
	for i=0, nCA3-1 {
		CA3nc[i].weight= CA3wmax
		CA3syn[i].wmin = CA3wmin
		CA3syn[i].gNmax = CA3wN
		CA3syn[i].p0 = CA3p0
	}
	for i=0, nEC-1 {
		ECnc[i].weight= ECwmax
		ECsyn[i].wmin = ECwmin
		ECsyn[i].gNmax = ECwN
	}
}

// Inhibitory strengths
proc setINamps() {
	itheta.sin(thetafr, 0)
	itheta.add(1)
	itheta.mul(Ithdr)
	btheta.sin(thetafr, PI)
	btheta.add(1)
	btheta.mul(Bthdr)
	otheta.sin(thetafr, PI)
	otheta.add(1)
	otheta.mul(Othdr)
}


// GUI
proc inputGUI() {
	xpanel("Inputs")
	xlabel("Spiking")
	xpvalue("CA3 max freq", &PLmaxfr, 1, "setCA3spikes()")	
	xpvalue("CA3 Noise", &CA3noise, 1, "setCA3spikes()")	
	xpvalue("EC max freq", &ECPLmaxfr, 1, "setECspikes()")	
	xpvalue("EC Noise", &ECnoise, 1, "setECspikes()")	
	xlabel("Excitatory weights")
	xpvalue("CA3 max AMPA", &CA3wmax, 1, "setEweights()")
	xpvalue("CA3 min frac AMPA", &CA3wmin, 1, "setEweights()")
	xpvalue("CA3 NMDA", &CA3wN, 1, "setEweights()")
	xpvalue("CA3 plasticity", &CA3p0, 1, "setEweights()")
	xpvalue("EC max AMPA", &ECwmax, 1, "setEweights()")
	xpvalue("EC min frac AMPA", &ECwmin, 1, "setEweights()")
	xpvalue("EC NMDA", &ECwN, 1, "setEweights()")
	xlabel("Inhibitory drive")
	xvalue("Theta frequency", "thetafr", 1, "setINamps()")
	xvalue("I strength", "Ithdr", 1, "setINamps()")
	xvalue("B strength", "Bthdr", 1, "setINamps()")
	xvalue("O strength", "Othdr", 1, "setINamps()")
	xpanel()
}

//###########################################################################
// Data recordings and storage

// Record cell voltage, current and calcium traces
objref Ev, EA1v, EA2v // Vectors that record cell voltage traces
objref Evt, EA1vt, EA2vt // Vectors that record times
objref EA1ca, EA1cat	// Dendritic calcium

// Data storage
objref fo
strdef fno, ff, fstem, prefolder, prestem

DT = 1	// record time every 1 ms

prefolder = "../../../Results/ThetaGamma"
prestem = "run"
expdate = 120315	// today's date
exprun = 1		// run number

// Store generic data
proc storedata() { local i
	sprint(fno,"%s/%s_%s.dat", $s1, $s2, $s3)
	fo = new File(fno)
	fo.wopen()
	for i=0, $o4.size-1 {
        	fo.printf("%g %g\n", $o5.x[i], $o4.x[i])
	}
	fo.close()
}

// Record soma voltage traces from example cells
proc recordV() { 
	Ev = new Vector()
	Evt = new Vector()
	EA1v = new Vector()
	EA1vt = new Vector()
	EA2v = new Vector()
	EA2vt = new Vector()
	
	cell.soma cvode.record(&v(0.5), Ev, Evt)
	cell.Adend[1] cvode.record(&v(0.5), EA1v, EA1vt)
	cell.Adend[2] cvode.record(&v(0.5), EA2v, EA2vt)
}

// Store voltage traces
proc storeVall() {
	sprint(ff, "%s/%g", prefolder, expdate)
	sprint(fstem, "run%g", exprun)
	
	storedata(ff, fstem, "EvSoma", Ev, Evt)
	storedata(ff, fstem, "EvAd1", EA1v, EA1vt)
	storedata(ff, fstem, "EvAd2", EA2v, EA2vt)
}

// Record dendritic calcium traces from example cells
proc recordCa() { 
	EA1ca = new Vector()
	EA1cat = new Vector()
	
	cell.Adend[1] cvode.record(&cai(0.5), EA1ca, EA1cat)
}

// Store calcium traces
proc storeCa() {
	sprint(ff, "%s/%g", prefolder, expdate)
	sprint(fstem, "run%g", exprun)
	
	storedata(ff, fstem, "EcaAd1", EA1ca, EA1cat)
}


proc dataGUI() {
  	xpanel("Data output")
  	xlabel("Data output")
  	xvalue("Date (ddmmyy)", "expdate")
  	xvalue("Experiment run", "exprun")
  	xbutton("Store voltage traces", "storeVall()")
  	xbutton("Store calcium traces", "storeCa()")
  	xpanel()
}


// DATA ANALYSIS
objref potdata, pall, Rdata, Rall
pall = new Vector()
Rall = new Vector()
pmax = 0
pmin = 0
pavg = 0
pstd = 0
pallavg = 0
pallstd = 0
Rmax = 0
Rmin = 0
Ravg = 0
Rstd = 0
Rallavg = 0
Rallstd = 0

// Calculate average synaptic "p" and "R" values
proc avgpot() {
	// for this run
	potdata = new Vector(nCA3)
	Rdata = new Vector(nCA3)
	for i=0, nCA3-1 {
		potdata.x[i] = CA3syn[i].p
		Rdata.x[i] = CA3syn[i].R
	}
	pmax = potdata.max()
	pmin = potdata.min()
	pavg = potdata.mean()
	pstd = potdata.stdev()
	Rmax = Rdata.max()
	Rmin = Rdata.min()
	Ravg = Rdata.mean()
	Rstd = Rdata.stdev()
	
	// for all runs
	pall.append(potdata)
	pallavg = pall.mean()
	pallstd = pall.stdev()	
	Rall.append(Rdata)
	Rallavg = Rall.mean()
	Rallstd = Rall.stdev()	
}

proc analGUI() {
  	xpanel("Data analysis")
  	xbutton("Calculate p and R", "avgpot()")
  	xlabel("Current run")
  	xvalue("Maximum p", "pmax")
  	xvalue("Minimum p", "pmin")
  	xvalue("Average p", "pavg")
  	xvalue("Std dev p", "pstd")
  	xvalue("Maximum R", "Rmax")
  	xvalue("Minimum R", "Rmin")
  	xvalue("Average R", "Ravg")
  	xvalue("Std dev R", "Rstd")
  	xlabel("Over all runs")
  	xvalue("Average p", "pallavg")
  	xvalue("Std dev p", "pallstd")
  	xvalue("Average R", "Rallavg")
  	xvalue("Std dev R", "Rallstd")
  	xpanel()
}


// Set up recordings
access cell.soma // by some reason it is only possible to record "t" when a section is accessed
tvec = new Vector()
tvec.record(&t,DT)
recordV()
recordCa()

// Load GUI
load_file("place1d_graphics.hoc")
preprasterplot()
//inputGUI()
//dataGUI()
//analGUI()
load_file("place1d_learn2.ses")
