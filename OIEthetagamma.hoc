// Network consisting of PC-BC-OLM cells.
// Can generate theta with nested gamma.
// Based on the models of Orban (2006) and Tort/Kopell (2007).
// Some cell code from ModelDB accession 138421 (Kopell book chapter).
// Programmed by BPG 10-2-15

load_file("nrngui.hoc") // make graphical interface tools available to this program
load_file("celltem.hoc")
load_file("CA1PC5.hoc")

fEmodel = 2	// 0 = single cpt Ecell; 1 = 5 cpt Tort; 2 = 5 cpt CA1 PC

// Tort/Kopell
//nO = 5	// number of O (OLM) cells
//nI = 5	// number of I (BC) cells
//nE = 1	// number of E (PC) cells

// Orban
nO = 70	// number of O (OLM) cells
nI = 100	// number of I (BC) cells
nE = 15	// number of E (PC) cells

// RANDOM NUMBER GENERATORS
objref r,r1,r2,r3,r4
r = new Random()	// start each with a different seed
r1 = new Random(1)
r2 = new Random(2)
r3 = new Random(3)
r4 = new Random(4)

// Base current drives
// Tort/Kopell
Idrive=0.0008	// mA/cm2
Odrive=-0.003
Ostd=0.0
Edrive=0.0008
Estd=0.0
// Orban (adjusted for smaller cells)
Idrive=0.0008
Odrive=-0.003
Ostd=0.00007
//Edrive=0.0008
//Estd=0.00007
Edrive=0.008	// CA1PC5 model
Estd=0.0001

// Noise specifications
// uniform range for initial membrane voltage (Tort/Kopell)
r.uniform(-80,-60)
// phase disturbing initial current injection (Tort/Kopell)
r1.uniform(0,250)	// duration
r2.normal(0.002,(0.0002)^2)	// amplitude (nA)
// drive current variation (O and E cells: Orban)
r3.normal(Odrive,Ostd^2)	
r4.normal(Edrive,Estd^2)	


// Connection strengths
OIstrength = 0.0002
IOstrength = 0.0005
IIstrength = 0.0001
IEstrength = 0.0001
OEstrength = 0.00015
EIstrength = 0.00005
EOstrength = 0.00001
// Connection strengths (Orban with CA1PC5)
OIstrength = 0.0002
IOstrength = 0.0005
IIstrength = 0.0001
IEstrength = 0.001	// CA1PC5
OEstrength = 0.0015	// CA1PC5
EIstrength = 0.00005
EOstrength = 0.00001

// Connection delays
OIdelay = 0
OEdelay = 0
IOdelay = 0
IIdelay = 0
IEdelay = 0
EIdelay = 0
EOdelay = 0

// Cell convergence (numbers of cells) onto target (100%: Tort/Kopell)
OIconv = nO
OEconv = nO
IOconv = nI
IIconv = nI
IEconv = nI
EIconv = nE
EOconv = nE
// Cell convergence (numbers of cells) onto target (Orban)
OIconv = 5
//OEconv = 0
OEconv = 8
IOconv = 0
//IOconv = 5
IIconv = 60
IEconv = 20
EIconv = 0
//EIconv = 5
EOconv = 5

// Final individual connection weights
if (OIconv > 0) {OIweight = OIstrength/OIconv} else {OIweight = 0}
if (OEconv > 0) {OEweight = OEstrength/OIconv} else {OEweight = 0}
if (IOconv > 0) {IOweight = IOstrength/IOconv} else {IOweight = 0}
if (IIconv > 0) {IIweight = IIstrength/IIconv} else {IIweight = 0}
if (IEconv > 0) {IEweight = IEstrength/IEconv} else {IEweight = 0}
if (EIconv > 0) {EIweight = EIstrength/EIconv} else {EIweight = 0}
if (EOconv > 0) {EOweight = EOstrength/EOconv} else {EOweight = 0}

// CELLS
objectvar Ocell, Icell, Ecell, nclist
Ocell = new List()
Icell = new List()
Ecell = new List()
nclist = new List()	// all network Netconns

// RECORDING AND STIMULATION
objectvar oapc[nO], iapc[nI], eapc[nE]
objectvar ostim[nO], istim[nI], estim[nE]
objectvar timeispikes[nI], timeespikes[nE], timeospikes[nO]
objref tvec

// CREATING CELLS
// initial voltage values uniformed distributed in (A,B):
objref cell

for(i=0; i<nO; i=i+1)	{
		cell = new OCell()
		Ocell.append(cell)
		cell.soma oapc[i] = new APCount(0.5)
		cell.soma	{
			drive_Ocellchann = r3.repick()	
			//drive_Ocellchann = Odrive
			v = r.repick() 
			}
}
 
for(i=0; i<nI; i=i+1)	{
		cell = new ICell()
		Icell.append(cell)
		cell.soma iapc[i] = new APCount(0.5)
		cell.soma			{
			drive_Icellchann = Idrive
			v = r.repick()
			}
}

for(i=0; i<nE; i=i+1)	{
		if (fEmodel == 0) {cell = new ECell()}
		if (fEmodel == 1) {cell = new ECell5()}
		if (fEmodel == 2) {
			cell = new PCell5()
			cell.soma insert Celldrive
		}
		Ecell.append(cell)
		cell.soma eapc[i] = new APCount(0.5)
		cell.soma.v = r.repick()
		if (fEmodel == 0) {
			cell.soma {
				drive_Ecellchann = r4.repick()	
				//drive_Ecellchann = Edrive
				}
		} 
		if (fEmodel == 1) {
			cell.soma {
				drive_Ecell5chann = r4.repick()	
				//drive_Ecell5chann = Edrive
				}
		}
		if (fEmodel == 2) {
			cell.soma {
				drive_Celldrive = r4.repick()	
				//drive_Celldrive = Edrive
				}
		}
}
							

// SETTING INITIAL PHASE SHIFT  (ie, random initial conditions in each trial, in addition to random intital v)
for(i=0; i<nO; i=i+1)	{
		ostim[i] = new IClamp()
		Ocell.object(i).soma ostim[i].loc(0.5)
		ostim[i].del = 0
		ostim[i].dur = r1.repick()
		ostim[i].amp =  r2.repick()
}

for(i=0; i<nI; i=i+1)	{
		istim[i] = new IClamp()
		Icell.object(i).soma istim[i].loc(0.5)
		istim[i].del = 0
		istim[i].dur = r1.repick()
		istim[i].amp = r2.repick()
}

for(i=0; i<nE; i=i+1) {	
		estim[i] = new IClamp()
		Ecell.object(i).soma estim[i].loc(0.5)
		estim[i].del = 0
		estim[i].dur = r1.repick()
		estim[i].amp = r2.repick()
}


// CREATE NETWORK

// Target cells receive "convergence" number of inputs from
// the pool of source cells (only one input per source cell at most)
// ("convergence" not reached if no. of sources < convergence)
// Connections made to all target synapse numbers between "first" and "last".
// connectcells(list of source cells, list of target cells 
//		convergence, first synapse, last synapse
//		connection delay, weight)
// appends the NetCons to a List called nclist

//r2.discunif(0, nE)

proc connectcells() {local i, j, nsyn, r  localobj syn, nc, u
  	// initialize the pseudorandom number generator
 	u = new Vector($o1.count)  // for sampling without replacement
  	for i=0, $o2.count-1 {	// loop over target cells
   		u.fill(0)  // u.x[i]==1 means spike source i has already been chosen
     		nsyn = 0
      		while (nsyn < $3 && nsyn < $o1.count) {
 			r = r2.discunif(0, $o1.count-1)  // return a source cell index
        		// no self-connection and only one connection from any source
        		if (u.x[r] == 0) {	// only one connection from any source
          			for j = $4, $5 {	// target synapses
            				// set up connection from source to target
            				syn = $o2.object(i).pre_list.object(j)
            				nc = $o1.object(r).connect2target(syn)
            				nclist.append(nc)
            				nc.delay = $6
            				nc.weight = $7
          			}
          		u.x[r] = 1
          		nsyn += 1
        		}
      		}
    	}
}


connectcells(Ecell, Icell, EIconv, 0, 1, EIdelay, EIweight)
connectcells(Ecell, Ocell, EOconv, 0, 1, EOdelay, EOweight)
connectcells(Icell, Icell, IIconv, 2, 2, IIdelay, IIweight)
connectcells(Icell, Ocell, IOconv, 2, 2, IOdelay, IOweight)
connectcells(Icell, Ecell, IEconv, 2, 2, IEdelay, IEweight)
connectcells(Ocell, Ecell, OEconv, 3, 3, OEdelay, OEweight)
connectcells(Ocell, Icell, OIconv, 3, 3, OIdelay, OIweight)



// Load GUI
load_file("graphics.hoc")