// General CA1 pyramidal cell model
//   - with minimal set of ion channels and their distributions
// BPG 20-8-09
// BPG 17-2-15: reduced 5 cpt geometry

// Based on Migliore 2005 - passive properties, Na, Kdr, Ka, Ih 
// and Poirazzi 2003 - IM, calcium currents (L, T, R), mAHP, sAHP
// Also Holbro et al PNAS 107:15975-15980, 2010 (fast Ca R)

// Geometry must define the section lists:
// basal_list, apical_list, SR_list, SLM_list
// soma and axon sections must be called "soma" and "axon"

begintemplate PCell5

public is_art, totnseg, totarea, Vrest
public init, set_dendrite
public pre_list, connect2target, cell_init

public soma_list, axon_list, dendrite_list, basal_list, apical_list
public SR_list, SLM_list

public soma, Adend, Bdend

public gna, NaMULT, arSOMA, arDIST, arMAX, gka, ghd


objref soma_list, axon_list, dendrite_list, basal_list, apical_list
objref SR_list, SLM_list

objref pre_list


external lambda_f
proc geom_nseg() {
	forall { nseg = int((L/(0.1*lambda_f(freq))+.9)/2)*2 + 1  }
}


create soma, Adend[3], Bdend


proc init() {

	soma_list = new SectionList()
	axon_list = new SectionList()
	dendrite_list = new SectionList()
	basal_list = new SectionList()
	apical_list = new SectionList()
	SR_list = new SectionList()
	SLM_list = new SectionList()
	
	connect Bdend(0), soma(0)
	connect Adend[0](0), soma(1)
	connect Adend[1](0), Adend[0](1)
	connect Adend[2](0), Adend[1](1)

	soma {L = 20 diam = 20}
	Bdend {L = 200 diam = 2}
	Adend[0] {L = 150 diam = 2}
	Adend[1] {L = 150 diam = 2}
	Adend[2] {L = 150 diam = 2}

	fix_seg = 0
	
	soma soma_list.append()
	Bdend basal_list.append()
	Bdend dendrite_list.append()
	forsec "Adend" apical_list.append()
	forsec "Adend" dendrite_list.append()

	// Passive properties from Migliore 2005
	Vrest = -65
	celsius = 35.0  

	Rm = 28000	// Migliore
	RmDend = Rm
	RmSoma = Rm
	RmAx = Rm

	Cm = 1
	CmSoma = Cm
	CmAx = Cm
	CmDend = Cm

	RaAll= 150	// Migliore 2005
	RaSoma=150  
	RaAx = 150

	gna =  0.025	// Migliore 2005
	AXONM = 5
	NaMULT = 0.015/0.025	// scale Na in dendrites (=1 for Migliore)
	arSOMA = 1.0	// slow inactivation at soma (1=none; 0=max) (BPG)
	arMAX = 0.5	// slow inact at distance (BPG)
	arDIST = 350	// distance at which inactivation saturates (BPG)

	gkdr = 0.01

	gka = 0.03
	KMULT =  gka
	KMULTP = gka

	ghd=0.00005

	soma_km = 0.06

	soma_caR = 0.03 
	soma_sAHP = 0.001
	soma_mAHP = 0.001

	caR_init = 0.03 
	sAHP_init = 0.001
	mAHP_init = 0.001
	caR_vact = -30	// make half-activation point more hyperpolarised
	caR_tinact = 20	// make inactivation faster

	// remove some currents
	soma_km = 0.0
	soma_caR = 0.0 
	soma_sAHP = 0.0
	soma_mAHP = 0.0
	caR_init = 0.0
	sAHP_init = 0.0
	mAHP_init = 0.0


	//forsec axon_list {insert pas e_pas=Vrest g_pas = 1/RmAx Ra=RaAx cm=CmAx}
	forsec soma_list {insert pas e_pas=Vrest g_pas = 1/RmSoma Ra=RaSoma cm=CmSoma}
	forsec dendrite_list {insert pas e_pas=Vrest g_pas = 1/RmDend Ra=RaAll cm=CmDend}

	access soma
	freq=50
	if (!fix_seg) {geom_nseg()}	// adjust segment number in each section
	totnseg=0
	forall {totnseg=totnseg+nseg}
	totarea=0
	forall {for (x) totarea=totarea+area(x)}
	access soma
	distance()

	forsec axon_list {   
                insert nax gbar_nax=gna*AXONM
                insert kdr gkdrbar_kdr=gkdr
                insert kap gkabar_kap = KMULTP
	}

	forsec soma_list {   
		insert hd ghdbar_hd=ghd	vhalfl_hd=-73
                insert na3 gbar_na3=gna ar_na3=arSOMA
                insert kdr gkdrbar_kdr=gkdr
                insert kap gkabar_kap = KMULTP
       		//insert km gbar_km=soma_km
            	insert carF gcabar_carF = soma_caR vha_carF=caR_vact ti_carF=caR_tinact           
            	//insert kca gbar_kca = soma_sAHP  // sAHP       
            	insert kmAHP gkbar_kmAHP = soma_mAHP  // mAHP      
       		insert cad    // calcium pump/buffering mechanism
	}

	forsec dendrite_list {
		insert hd ghdbar_hd=ghd
                insert na3 gbar_na3=gna*NaMULT
                insert kdr gkdrbar_kdr=gkdr
		insert kap gkabar_kap=0
		insert kad gkabar_kad=0
       		//insert km gbar_km=soma_km
            	insert carF gcabar_carF = caR_init vha_carF=caR_vact ti_carF=caR_tinact            
            	//insert kca gbar_kca = sAHP_init  // sAHP       
            	insert kmAHP gkbar_kmAHP = mAHP_init  // mAHP      
       		insert cad    // calcium pump/buffering mechanism

		for (x) if (x>0 && x<1) { xdist = distance(x)
		
			// Na slow inactivation saturates at 350um (BPG)
			if (xdist < arDIST) {
                	  ar_na3(x) = arSOMA-(arSOMA-arMAX)*(xdist/arDIST)
                	} else {
                	  ar_na3(x) = arMAX
                	}

			// Ih saturates at 350um (BPG)
			if (xdist < 350) {
                	  ghdbar_hd(x) = ghd*(1+3*xdist/100)
                	} else {
                	  ghdbar_hd(x) = ghd*(1+3*350/100)
                	}
                	
                	// KA saturates at 350um (BPG)
                	if (xdist > 100 && xdist < 350) {
				vhalfl_hd=-81
                        	gkabar_kad(x) = KMULT*(1+xdist/100)
                        } else if (xdist >= 350) {
				vhalfl_hd=-81
                        	gkabar_kad(x) = KMULT*(1+350/100)
                	} else {
				vhalfl_hd=-73
                        	gkabar_kap(x) = KMULTP*(1+xdist/100)
               		}
		}
	}

	cell_init()

	pre_list = new List()
	synapses()

} // end init


proc set_dendrite() {
	KMULT =  gka
	KMULTP = gka
	access soma
	distance()
	forsec dendrite_list {
		gbar_na3=gna*NaMULT		
		for (x) if (x>0 && x<1) { xdist = distance(x)
		
			// Na slow inactivation saturates at 350um (BPG)
			if (xdist < arDIST) {
                	  ar_na3(x) = arSOMA-(arSOMA-arMAX)*(xdist/arDIST)
                	} else {
                	  ar_na3(x) = arMAX
                	}

			// Ih saturates at 350um (BPG)
			if (xdist < 350) {
                	  ghdbar_hd(x) = ghd*(1+3*xdist/100)
                	} else {
                	  ghdbar_hd(x) = ghd*(1+3*350/100)
                	}
                	
                	// KA saturates at 350um (BPG)
                	if (xdist > 100 && xdist < 350) {
				vhalfl_hd=-81
                        	gkabar_kad(x) = KMULT*(1+xdist/100)
                        } else if (xdist >= 350) {
				vhalfl_hd=-81
                        	gkabar_kad(x) = KMULT*(1+350/100)
                	} else {
				vhalfl_hd=-73
                        	gkabar_kap(x) = KMULTP*(1+xdist/100)
               		}
		}
	}
	cell_init()
}


proc cell_init() {
	t=0
        forall {
        v=Vrest
        if (ismembrane("nax") || ismembrane("na3")) {ena=55}
        if (ismembrane("kdr") || ismembrane("kap") || ismembrane("kad")) {ek=-90}
        if (ismembrane("hd") ) {ehd_hd=-30}
	}
	finitialize(Vrest)
        fcurrent()

        forall {
	for (x) {
	if (ismembrane("na3")||ismembrane("nax")){e_pas(x)=v(x)+(ina(x)+ik(x))/g_pas(x)}
	if (ismembrane("hd")) {e_pas(x)=e_pas(x)+i_hd(x)/g_pas(x)}
		}
	}
}


obfunc connect2target() { localobj nc //$o1 target point process, optional $o2 returned NetCon
  	soma nc = new NetCon(&v(1), $o1)
  	nc.threshold = -10
  	if (numarg() == 2) { $o2 = nc } // for backward compatibility
  	return nc
}


objref syn_
proc synapses() {
	soma syn_ = new Exp2Syn(0.5)  pre_list.append(syn_)	// 0: AMPA
    	syn_.tau1 = 0.5
    	syn_.tau2 = 3
    	syn_.e = 0
  	soma syn_ = new NMDA(0.5)  pre_list.append(syn_)	// 1: NMDA
    	syn_.tcon = 2.3	
    	syn_.tcoff = 100
    	syn_.gNMDAmax = 1	// use connection weight to determine max cond
	soma syn_ = new Exp2Syn(0.5)  pre_list.append(syn_)	// 2: BC-GABAA
    	syn_.tau1 = 0.5
    	syn_.tau2 = 10
    	syn_.e = -80
	Adend[2] syn_ = new Exp2Syn(0.5)  pre_list.append(syn_)	// 2: OLM-GABAA
	//soma syn_ = new Exp2Syn(0.5)  pre_list.append(syn_)	// 2: OLM-GABAA
    	syn_.tau1 = 0.5
    	syn_.tau2 = 20
    	syn_.e = -80
}


func is_art() { return 0 }

endtemplate PCell5
