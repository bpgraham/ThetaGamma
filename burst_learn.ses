{load_file("nrngui.hoc")}
objectvar save_window_, rvp_
objectvar scene_vector_[9]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}
{
xpanel("Inputs", 0)
xlabel("Theta")
thetafr = 2
xvalue("Theta frequency","thetafr", 1,"setAll()", 0, 0 )
xlabel("CA3 spiking")
CA3start = 250
xvalue("CA3 start","CA3start", 1,"setCA3spikes()", 0, 1 )
CA3spfreq = 100
xvalue("CA3 freq","CA3spfreq", 1,"setCA3spikes()", 0, 1 )
CA3noise = 0.5
xvalue("CA3 noise","CA3noise", 1,"setCA3spikes()", 0, 1 )
CA3burstlength = 30
xvalue("CA3 burst length","CA3burstlength", 1,"setCA3spikes()", 0, 1 )
xlabel("EC spiking")
ECstart = 20000
xvalue("EC start","ECstart", 1,"setECspikes()", 0, 1 )
ECspfreq = 100
xvalue("EC freq","ECspfreq", 1,"setECspikes()", 0, 1 )
ECnoise = 0.5
xvalue("EC noise","ECnoise", 1,"setECspikes()", 0, 1 )
ECburstlength = 30
xvalue("EC burst length","ECburstlength", 1,"setECspikes()", 0, 1 )
xlabel("Excitatory weights")
CA3wmax = 0.005
xvalue("CA3 max AMPA","CA3wmax", 1,"setEweights()", 0, 1 )
CA3wmin = 1
xvalue("CA3 min frac AMPA","CA3wmin", 1,"setEweights()", 0, 1 )
CA3wN = 0.001
xvalue("CA3 NMDA","CA3wN", 1,"setEweights()", 0, 1 )
CA3p0 = 0
xvalue("CA3 plasticity","CA3p0", 1,"setEweights()", 0, 1 )
ECwmax = 0.0005
xvalue("EC max AMPA","ECwmax", 1,"setEweights()", 0, 1 )
ECwmin = 1
xvalue("EC min frac AMPA","ECwmin", 1,"setEweights()", 0, 1 )
ECwN = 0.004
xvalue("EC NMDA","ECwN", 1,"setEweights()", 0, 1 )
xlabel("Inhibitory drive")
Ithdr = 0.01
xvalue("I strength","Ithdr", 1,"setINamps()", 0, 0 )
Bthdr = 0.005
xvalue("B strength","Bthdr", 1,"setINamps()", 0, 0 )
Othdr = 0.005
xvalue("O strength","Othdr", 1,"setINamps()", 0, 0 )
xpanel(302,126)
}
{
xpanel("Data output", 0)
xlabel("Show inputs")
xbutton("Spike raster","showraster()")
xbutton("Spike histogram","showhist()")
xlabel("Data output")
expdate = 270815
xvalue("Date (ddmmyy)","expdate", 0,"", 0, 0 )
exprun = 1
xvalue("Experiment run","exprun", 0,"", 0, 0 )
xbutton("Store voltage traces","storeVall()")
xbutton("Store calcium traces","storeCa()")
xpanel(43,564)
}
{
xpanel("Data analysis", 0)
xbutton("Calculate peak Ca","avgsynca()")
camax = 0
xvalue("Maximum Ca","camax", 0,"", 0, 0 )
camin = 0
xvalue("Minimum Ca","camin", 0,"", 0, 0 )
caavg = 0
xvalue("Average Ca","caavg", 0,"", 0, 0 )
castd = 0
xvalue("Std dev Ca","castd", 0,"", 0, 0 )
capkmax = 0
xvalue("Max peak Ca","capkmax", 0,"", 0, 0 )
capkmin = 0
xvalue("Min peak Ca","capkmin", 0,"", 0, 0 )
capkavg = 0
xvalue("Avg peak Ca","capkavg", 0,"", 0, 0 )
capkstd = 0
xvalue("Std peak Ca","capkstd", 0,"", 0, 0 )
xbutton("Calculate p and R","avgpot()")
xlabel("Current run")
pmax = 0
xvalue("Maximum p","pmax", 0,"", 0, 0 )
pmin = 0
xvalue("Minimum p","pmin", 0,"", 0, 0 )
pavg = 0
xvalue("Average p","pavg", 0,"", 0, 0 )
pstd = 0
xvalue("Std dev p","pstd", 0,"", 0, 0 )
Rmax = 0
xvalue("Maximum R","Rmax", 0,"", 0, 0 )
Rmin = 0
xvalue("Minimum R","Rmin", 0,"", 0, 0 )
Ravg = 0
xvalue("Average R","Ravg", 0,"", 0, 0 )
Rstd = 0
xvalue("Std dev R","Rstd", 0,"", 0, 0 )
xlabel("Over all runs")
pallavg = 0
xvalue("Average p","pallavg", 0,"", 0, 0 )
pallstd = 0
xvalue("Std dev p","pallstd", 0,"", 0, 0 )
Rallavg = 0
xvalue("Average R","Rallavg", 0,"", 0, 0 )
Rallstd = 0
xvalue("Std dev R","Rallstd", 0,"", 0, 0 )
xpanel(631,90)
}
{
xpanel("RunControl", 0)
v_init = -65
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 5
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 5000
xvalue("t","t", 2 )
tstop = 5000
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.640419
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 40
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
screen_update_invl = 0.05
xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
realtime = 18.57
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(6,132)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5000,-80,40)
scene_vector_[2] = save_window_
{save_window_.view(0, -80, 5000, 120, 848, 3, 300.6, 200.8)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addexpr("v(.5)", 1, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5000,-2.32831e-10,0.024)
scene_vector_[3] = save_window_
{save_window_.view(0, -2.32831e-10, 5000, 0.024, 1213, 0, 300.6, 200.8)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("CA3syn[0].ca", 1, 1, 0.8, 0.9, 2)
save_window_.addexpr("CA3syn[1].ca", 2, 1, 0.8, 0.9, 2)
save_window_.addexpr("CA3syn[2].ca", 3, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5000,-2.32831e-10,0.032)
scene_vector_[4] = save_window_
{save_window_.view(0, -2.32831e-10, 5000, 0.032, 1218, 337, 300.6, 200.8)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("ECsyn[0].ca", 1, 1, 0.8, 0.9, 2)
save_window_.addexpr("ECsyn[1].ca", 2, 1, 0.8, 0.9, 2)
save_window_.addexpr("ECsyn[2].ca", 3, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5000,-80,40)
scene_vector_[5] = save_window_
{save_window_.view(0, -80, 5000, 120, 848, 284, 300.6, 200.8)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addvar("cell.Adend[1].v( 0.5 )", 1, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5000,-80,40)
scene_vector_[6] = save_window_
{save_window_.view(0, -80, 5000, 120, 854, 540, 300.6, 200.8)}
graphList[0].append(save_window_)
save_window_.save_name("graphList[0].")
save_window_.addvar("cell.Adend[2].v( 0.5 )", 1, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,5000,2.32831e-10,0.02)
scene_vector_[8] = save_window_
{save_window_.view(0, 2.32831e-10, 5000, 0.02, 1216, 538, 300.6, 200.8)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("istim.amp", 1, 1, 0.8, 0.9, 2)
save_window_.addexpr("bstim.amp", 2, 1, 0.8, 0.9, 2)
}
objectvar scene_vector_[1]
{doNotify()}
