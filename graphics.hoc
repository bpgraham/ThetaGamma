// GUI
load_file("OIEthetagamma.ses")
fsession = 1	// set to 0 if no session file loaded


// RASTER PLOT AND SPIKE HISTOGRAMS
objref vec, vec2, vec3, spikes, spikes2, spikes3
objref spikey, spikey2,spikey3
objref graster, vbox, vbox2, hbox
objref ghist, ghist2, ghist3, vboxh
objref spiket, spiket2, spiket3, sphist, sphist2, sphist3, thist

proc preprasterplot() {

	spikes = new List()
	spikes2 = new List()
	spikes3 = new List()

	for i = 0,nI-1 {
		vec = new Vector()
		iapc[i].record(vec)
		spikes.append(vec)
	}
	for i = 0,nO-1{
		vec2 = new Vector()
		oapc[i].record(vec2)
		spikes2.append(vec2)
	}
	for i = 0,nE-1{
		vec3 = new Vector()
		eapc[i].record(vec3)
		spikes3.append(vec3)
	}
}


DT = 1	// record time every 1 ms
HW = 5	// 5 ms bins for spike histograms
STH = 500	// start time for binning
ENDT = 1000
fTH = 1	// accumulate spikes for a theta cycle
theta = 150	// ms (5 Hz)

access Ecell.object(0).soma // by some reason it is only possible to record "t" when a section is accessed
tvec = new Vector()
tvec.record(&t,DT)
preprasterplot()

// for small net (large, thick marks)
brusher=4
marksize=6
// for large net (small, thin marks)
brusher=2
marksize=1

// Raster plot of spike times
proc showraster(){local i

	graster = new Graph(0) 
	graster.erase_all()

	objref spikey, spikey2,spikey3
	
	for i = 0,nI-1 {
		spikey = new Vector()
		spikey = spikes.object(i).c //creates a vector of size as the i-th vector in the list
		spikey.fill(nO+i+1) // fill all entries with the number i+1
		spikey.mark(graster, spikes.object(i), "|", marksize, 2, brusher)
	}
	for i = 0,nO-1 {
		spikey2 = new Vector()
		spikey2 = spikes2.object(i).c //creates a vector of size as the i-th vector in the list
		spikey2.fill(i+1) // fill all entries with the number i+1
		spikey2.mark(graster, spikes2.object(i), "|", marksize, 3, brusher)
	}
	for i = 0,nE-1 {
		spikey3 = new Vector()
		spikey3 = spikes3.object(i).c //creates a vector of size as the i-th vector in the list
		spikey3.fill(nI+nO+i+1) // fill all entries with the number i+1
		spikey3.mark(graster, spikes3.object(i), "|", marksize, 1, brusher)
	}

	graster.view(0, 0, t, nO+nI+nE+1, 100, 100, 1000, 500)
				
}

func mod() {
	return $1%theta
}

// Histogram of spike times
proc showhist(){local i

	ghist = new Graph(0) 
	ghist.erase_all()
	ghist2 = new Graph(0) 
	ghist2.erase_all()
	ghist3 = new Graph(0) 
	ghist3.erase_all()

	objref spiket, spiket2,spiket3
	spiket = new Vector()
	spiket2 = new Vector()
	spiket3 = new Vector()
	
	for i = 0,nI-1 {
		spiket.append(spikes.object(i)) // accumulate spikes from all cells
	}
	for i = 0,nO-1 {
		spiket2.append(spikes2.object(i)) // accumulate spikes from all cells
	}
	for i = 0,nE-1 {
		spiket3.append(spikes3.object(i)) // accumulate spikes from all cells
	}
	
	if (fTH == 1) {
		STH = 0
		ENDT = theta
		// calculate theta period as time between one pair of O cell spikes
		thsize = spikes2.object(0).size()
		//theta = spiket2.x[thsize-1] - spiket2.x[thsize-2]
		spiket.apply("mod")
		spiket2.apply("mod")
		spiket3.apply("mod")
	
		sphist3 = spiket3.histogram(STH, theta, HW)		// E
		sphist = spiket.histogram(STH, theta, HW)		// I
		sphist2 = spiket2.histogram(STH, theta, HW)		// O
	
		thist = new Vector(sphist.size())
		thist.indgen(STH, HW)
	} else {
		STH = 500
		ENDT = t
		sphist3 = spiket3.histogram(STH, t, HW)		// E
		sphist = spiket.histogram(STH, t, HW)		// I
		sphist2 = spiket2.histogram(STH, t, HW)		// O
	
		thist = new Vector(sphist.size())
		thist.indgen(STH, HW)
	}
	
	sphist.plot(ghist, thist)
	sphist2.plot(ghist2, thist)
	sphist3.plot(ghist3, thist)

	vboxh = new VBox()
	vboxh.intercept(1)	//all following creations go into the "vbox" box

	ghist.label(ENDT-(ENDT/10), sphist3.max()-10, "E")
	ghist3.view(STH, 0, ENDT, sphist3.max(), 200, 0, 500, 200)
	ghist.view(STH, 0, ENDT, sphist.max(), 200, 200, 500, 200)
	ghist2.view(STH, 0, ENDT, sphist2.max(), 200, 400, 500, 200)
	
	vboxh.intercept(0)	//ends intercept mode
	vboxh.map("Spike histograms", 200, 200, 500, 600)	//draw the box and its contents

}


proc createpanels() {
	xpanel("Graphics")
	xbutton("Raster plot", "showraster()")
	xbutton("Spike histograms", "showhist()")
	xpanel()
}

if (!fsession) {
	createpanels()
}

